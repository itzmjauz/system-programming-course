POTOCOL FOR AUDIOCLIENT AND SERVERCLIENT FOR ASSIGNMENT 4

1.1 Initial connection
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 1 0 0 0 0 1 1 0 1 0 0 1 1 1 1 0 1 0 0 1 1 1 0 0 1 0 0 1 1 1 0|                                                              
~0 1 0 0 0 1 0 1 0 1 0 0 0 0 1 1 0 1 0 1 0 1 0 0|               ~     
~                      FILENAME(0 ~ 1017)                       ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
The initial connection consists of the first message from the client to server, containing "CONNECT" as initial 7 bytes,
and the rest of the message containing a filename.
which can take up to the rest of BUFSIZE which is 1017 bytes.
The server responds with the same packet the client sent. unless there is an error. such as the deny message:
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 1 1 1 0 0 1 0 1 1 0 0 1|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

1.2 File data
The client compares buffers and if correct listens for a next packet
The server's next packet consists of details of the audiofile. such as sample rate sample size and channels:
This data is put into a string with each value separated by | characters.
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
~                    audiodata(0 ~ 1024)                        ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

Here again, the string can be up to 1024 in size, but this is highly inprobable (if it happens you are doing something wrong).

1.3 Filter Data
after this packet the data about the filter argument is send over, this packet will be '0' if no filter is selected.
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| filter number |  filter argument  (8 ~ 1024)                  |
~                                                               ~
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


2. Streaming
The client sets up the audio output and listens for packets to stream. 
Server sends client audiobuffers with intervals equals to the buffersize divided by bitrate. (to ensure no flooding of audio buffers)

This is raw audiodata which can directly be passed to the audio system
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
~                    AUDIOBUFFER(0 ~ 1024)                      ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The client send back an OK package after every received audiobuffer :
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 1 0 0 1 1 1 1 0 1 0 0 1 0 1 1 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

3. Ending streaming
When the audio file is done streaming we are sending a special 'DONE' packet
The DONE message looks like this:
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0 1 0 0 0 1 0 0 0 1 0 0 1 1 1 1 0 1 0 0 1 1 1 0 0 1 1 0 0 1 0 1|                                                         
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

4. Audio Filters
There are three implemented audiofilters.

The filter arguments follow after ./executable [hostname] [filename] [<filter> [<filter options>]]
filters are optional. 
If characters other than digits are given the program converts the letters to decimal values, 
the results will still adhere to the range constraints.

4.1 VOL 
Usage : ./executable [hostname] [filename] VOL [percentage]
percentage can range from 0 to 999 
And will adjust the volume, thus 100 has no noticable results.

4.2 NOISE
Usage : ./executable [hostname] [filename] noise [frequency]
It will add a since wave with given frequency, 
frequency can range from 0 to 99999 , although higher values will give unexpected results. 

4.3 SPEED
Usage : ./executable [hostname] [filename] SPEED [percentage]
SPEED will adjust the speed the audio is played at.
The SPEED value can range from 1 to 999, 0 is not accepted since this would result in an infinite quiet loop.
